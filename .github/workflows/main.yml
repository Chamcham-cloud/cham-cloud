name: macOS Remote Access (SSH via Tailscale)

on:
  workflow_dispatch:

jobs:
  secure-ssh:
    runs-on: macos-latest # Artık macOS üzerinde çalışacak
    timeout-minutes: 3600

    steps:
      - name: Configure SSH Access and Create User
        run: |
          # 1. Uzak Girişi (SSH) Etkinleştirme
          # macOS'ta SSH servisi "Remote Login" olarak adlandırılır.
          sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
          sudo systemsetup -setremotelogin on
          
          # 2. Yeni Kullanıcı Oluşturma ve "ehe" şifresini atama
          # macOS'ta kullanıcı oluşturmak için 'dscl' komutu kullanılır.
          
          USERNAME="RDP"
          PASSWORD="ehe" # UYARI: Güvenlik için yine de güçlü bir şifre önerilir!
          
          # Kullanıcı ID'sini belirleme (mevcut en yüksek ID'den bir fazlası)
          LAST_ID=$(dscl . list /Users UniqueID | awk '{print $2}' | sort -n | tail -1)
          NEW_ID=$((LAST_ID + 1))
          
          # Kullanıcıyı oluşturma ve Home dizinini ayarlama
          sudo dscl . create /Users/$USERNAME
          sudo dscl . create /Users/$USERNAME UniqueID $NEW_ID
          sudo dscl . create /Users/$USERNAME PrimaryGroupID 20 # "staff" grubu
          sudo dscl . create /Users/$USERNAME UserShell /bin/bash
          sudo dscl . create /Users/$USERNAME RealName "GH Remote User"
          sudo dscl . create /Users/$USERNAME NFSHomeDirectory /Users/$USERNAME
          
          # Kullanıcının şifresini ayarlama
          echo "Setting password for user $USERNAME"
          sudo dscl . passwd /Users/$USERNAME $PASSWORD
          
          # Home dizinini oluşturma ve izinleri ayarlama
          sudo mkdir /Users/$USERNAME
          sudo chown $USERNAME:staff /Users/$USERNAME
          
          # Yeni kullanıcıya 'admin' yetkisi verme (Gerekli olabilir)
          sudo dscl . append /Groups/admin GroupMembership $USERNAME
          
          # Çıktı değişkenlerini ayarla
          echo "RDP_CREDS=User: $USERNAME | Password: $PASSWORD" >> $env:GITHUB_ENV
          echo "SSH_INFO=User: $USERNAME | Password: $PASSWORD"
          
      - name: Install Tailscale
        run: |
          # macOS için Tailscale kurulumu farklıdır, ancak bu iş akışında
          # doğrudan paket yöneticisi (brew) kullanamayız, manuel kurulum/paket
          # daha garantili olur. Ancak GitHub runners genellikle Tailscale'i 
          # doğrudan çalıştırabilir. MSI/EXE yerine Homebrew kullanmayı deneyelim:

          # Eğer Homebrew yüklü değilse, Tailscale'i manuel indirmek gerekebilir.
          # Ancak çoğu macOS runner'da Homebrew yüklüdür.
          brew install tailscale || echo "Tailscale kurulumu başarısız oldu, manuel indirme gerekebilir."

      - name: Establish Tailscale Connection
        run: |
          # Tailscale'i homebrew yoluyla PATH'e ekle
          export PATH="/opt/homebrew/bin:$PATH" # Apple Silicon (M serisi) için
          export PATH="/usr/local/bin:$PATH"   # Intel için

          # Tailscale'i verilen kimlik doğrulama anahtarı ile başlat
          tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-runner-$GITHUB_RUN_ID &
          
          # Tailscale'in IP almasını bekleme
          TS_IP=""
          for i in {1..10}; do
              TS_IP=$(tailscale ip -4 2>/dev/null)
              if [ -n "$TS_IP" ]; then
                  break
              fi
              sleep 5
          done
          
          if [ -z "$TS_IP" ]; then
              echo "Tailscale IP adresi alınamadı. Çıkılıyor."
              exit 1
          fi
          echo "TAILSCALE_IP=$TS_IP" >> $GITHUB_ENV
      
      - name: Maintain Connection and Display Info
        run: |
          echo "
          === SSH ACCESS VIA TAILSCALE ===
          Address (Tailscale IP): $TAILSCALE_IP
          Username: RDP
          Password: ehe
          
          Bağlantı Şekli: SSH
          Kullanım: ssh RDP@$TAILSCALE_IP
          ==============================
          "
          # Çalıştırıcıyı aktif tutmak için uzun süre döngüde kal
          while true; do
              echo "[$(date)] SSH Active - Use Ctrl+C in workflow to terminate"
              sleep 300
          done
